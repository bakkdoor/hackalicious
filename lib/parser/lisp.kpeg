#require "kpeg"

%% name = Lisp::Parser
%% {
  attr_accessor :something_cool
}

%% ast-location = ::Lisp::Parser::AST
%% comment = ast Comment(text)
%% number = ast Literal(value)
%% string = ast Literal(value)
%% literal = ast Literal(value)
%% identifier = ast Identifier(name)
%% expr_list = ast ExpressionList(expressions)
%% sexp = ast Sexp(expressions)
%% quote = ast Quote(expression)
%% unquote = ast Unquote(expression)
%% splice_unquote = ast SpliceUnquote(expression)

ALPHA = /[A-Za-z]/
DIGIT = /[0-9]/
operator = "+" | "!" | "?" | "=" | "_" | "-" | ":" | "*" | "/"
lp = "("
rp = ")"
NL = "\n"
space = " " | "\t" | NL


comment = ";" < (!NL .)* > NL ~comment(text)
number = < /[1-9][0-9]*/ > { text }
integer_lit = number:n ~number(n.to_i)
float_lit = number:w "." number:f ~number("#{w}.#{f}".to_f)
true_lit = "true" ~literal(true)
false_lit = "false" ~literal(false)
nil_lit = "nil" ~literal(nil)
string_lit = '"' < (!'"' .)* > '"' ~string(text)
identifier = < (ALPHA | DIGIT | "_"| "-" | operator)+ > { text.to_sym }

programm = comment:c programm:p { p }
        | sexp:s space* programm:p ~expr_list(p << s)
        | sexp:s ~expr_list([s])

nested_expr = "(" expr:e ")" { e }

sexp = space* sexp:s space* { s }
     | "~" (sexp | atom):s ~unquote(s)
     | "~@" (sexp | atom):s ~splice_unquote(s)
     | "(" space* ")" ~sexp([])
     | "`(" space* ")" ~quote([])
     | "`" sexp:s ~quote(s)
     | "(" (sexp | atom)+:s ")" ~sexp(s)

atom = space* atom:a space* { a }
     | literal
     | identifier:i ~identifier(i)

literal = integer_lit
        | float_lit
        | true_lit
        | false_lit
        | nil_lit
        | string_lit

root = programm:p { p }
